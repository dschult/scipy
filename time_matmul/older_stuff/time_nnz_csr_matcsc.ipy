import sys
from try_csr_matcsc import *
from numpy.testing import assert_array_almost_equal
import matplotlib.pyplot as plt
plt.ion()

M, N, K, avg_col_nnz, seed = 100, 40, 1000, 5, 42
#M, N, K, avg_col_nnz, seed = 1, 4, 50000, 500, 42
#assert (M, N, K, density, seed), "need something like: M, N, K, density, seed = 3, 4, 5, 0.1, 42"
density = avg_col_nnz / K  # so avg_col_nnz = K * density

A = sp.sparse.csr_array((M, K), dtype='i')
A[:,:avg_col_nnz] = 1
B = sp.sparse.csc_array((K, N), dtype='i')
B[:avg_col_nnz, :] = 1

print("A (shape  nnz): ",A.shape,A.nnz)
print("B (shape  nnz): ",B.shape,B.nnz)

Cnew = csr_matmul_csc(A, B)
#print(Cnew.indptr)
#print(Cnew.indices)
#print(Cnew.data)
Ctot = A.toarray() @ B.toarray()
Cold = csr_matmul_csr(A, B.tocsr())
assert_array_almost_equal(Ctot, Cnew.toarray())
assert_array_almost_equal(Cold.toarray(), Cnew.toarray())


def compare_times(N=10, colnnz=1, K=10000, M=10):
    half_colnnz = colnnz // 2
    two_colnnz = colnnz + colnnz
    oah_colnnz = half_colnnz + colnnz
    sl_nnz = slice(-two_colnnz, -half_colnnz, 1)
    A = sp.sparse.csr_array((M, K), dtype='f')
    A[:,sl_nnz] = 1.372684
    B = sp.sparse.csc_array((K, N), dtype='f')
    B[-oah_colnnz:, :] = 1.72437
    Bcsr = B.tocsr()

    nnz_row = np.diff(A.indptr)
    print("\nA (shape  nnz): ",A.shape,A.nnz, end=' ')
    print(f"nnz per row of A: Avg: {nnz_row.sum() / M}; Max: {nnz_row.max()}")

    nnz_col = np.diff(B.indptr)
    print("B (shape  nnz): ",B.shape,B.nnz, end='')
    print(f"nnz per col of B: Avg: {nnz_col.sum() / N}; Max: {nnz_col.max()}")

    print("Timing csr_matmul_csc")
    out_rac = %timeit -o -r 7 csr_matmul_csc(A, B)  # time csr@csc method
    print("Timing sp.sparse (i.e. csr_matmat)")
    #out_rar = %timeit -o -r 7 A@B  # time current sparse multiply
    out_rar = %timeit -o -r 7 csr_matmul_csr(A, Bcsr)  # time csr@csr method

    return out_rac.best, out_rar.best

fh = open("matmul_nnz_timing_data_midfloat.txt", 'a')
N=5
colnnz=6400
K=1100000
M=100

for M in [1, 2, 8, 32]:
    for N in [1, 2, 8, 32]:
        for colnnz in [2**i for i in range(0,10,2)]:
            rc, rr = compare_times(N=N, colnnz=colnnz, K=K, M=M)
            print(M, N, colnnz, rc, rr, rc/rr, file=fh, flush=True)
#for M in [1, 2, 4, 8, 16, 32, 64, 128]:
#    for N in [2**i for i in range(8)]:
#        for colnnz in [2**i for i in range(16)]:
#            rc, rr = compare_times(N=N, colnnz=colnnz, K=K, M=M)
#            print(M, N, colnnz, rc, rr, rc/rr, file=fh, flush=True)

#sys.exit()
#out1, out2, alpha, ratio = [], [], [], []
#pow2s = [2**i for i in range(2, 10)]
#for colnnz in pow2s:
#    rc, rr = compare_times(N=N, colnnz=colnnz, K=K, M=M)
#    out1.append(rc)
#    out2.append(rr)
#    alpha.append(rc/rr * (N + colnnz**2) / (colnnz * N))
#    ratio.append(rc/rr)
#
#plt.figure(1);plt.clf()
#plt.plot(pow2s, ratio, '-ok')
#plt.figure(2);#plt.clf()
#plt.plot(pow2s, out1, '-ob', pow2s, out2, '-oy')
#plt.figure(3);#plt.clf()
#plt.plot(range(2, 10), out1, '-ob', range(2, 10), out2, '-oy')
#plt.figure(4);plt.clf()
#plt.plot(pow2s, alpha, '-o')
