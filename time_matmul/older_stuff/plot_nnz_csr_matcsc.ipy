import pandas as pd
from try_csr_matcsc import *
from numpy.testing import assert_array_almost_equal
import matplotlib as mpl
import matplotlib.pyplot as plt
plt.ion()

df=pd.read_csv("matmul_nnz_timing_data_tailend.txt", sep=' ', header=0)

N = np.log2(df['N'])
M = np.log2(df['M'])
nnz = np.log2(df['colnnz'])
ratio = df['ratio']
lratio = np.log2(ratio)

## FORMULA:   (M == 1) or (N == 1) or nnz * N * M < 2**12 = 2024
#predict13 = (nnz + N + M) < 13
#predict12 = (nnz + N + M) < 12
#predict11 = (nnz + N + M) < 11
#numb_right13 = (~ ((ratio < 1) ^ predict13)).sum()
#numb_right12 = (~ ((ratio < 1) ^ predict12)).sum()
#numb_right11 = (~ ((ratio < 1) ^ predict11)).sum()
#print(f"N*M*nnz < 4096: {numb_right13} correct predictions: {100 * numb_right13 / len(predict13):4.2f}%")
#print(f"N*M*nnz < 2048: {numb_right12} correct predictions: {100 * numb_right12 / len(predict12):4.2f}%")
#print(f"N*M*nnz < 1024: {numb_right11} correct predictions: {100 * numb_right11 / len(predict11):4.2f}%")

predict = (nnz + N + M) >= 0
numb_right = (~ ((ratio < 1) ^ predict)).sum()
print(f"N*M*nnz > 0: {numb_right} correct predictions: {100 * numb_right / len(predict):4.2f}%")

## PLOTS
#colrs = mpl.colors.TwoSlopeNorm(vmin=ratio.min(), vcenter=1, vmax=ratio.max())

fig = plt.figure(1)
plt.clf()
#plt.scatter(N*1.1+M, nnz, c=colrs(ratio), cmap=mpl.cm.coolwarm)
mask = (N>0) & (M>0)
plt.scatter(N[mask]*1.05+M[mask], nnz[mask], c=ratio[mask]>1)
plt.plot([12, 0], [0, 12], '-m')
plt.plot([11, 0], [0, 11], '-m')
plt.ylabel('log2(column_nnz)')

fig = plt.figure(2)
plt.clf()
plt.scatter(N*1.05+M, nnz, c=ratio>1)

#colrs = mpl.colors.TwoSlopeNorm(vmin=lratio.min(), vcenter=0, vmax=lratio.max())
#
#fig = plt.figure(1)
#plt.clf()
#plt.scatter(N*1.1+M, nnz, c=colrs(lratio), cmap=mpl.cm.coolwarm)
#plt.plot([12, 0], [0, 12], '-m')
#plt.plot([11, 0], [0, 11], '-m')
#plt.ylabel('log2(column_nnz)')
#plt.xlabel('log2(N) + log2(M)')
##ax = fig.add_subplot(projection="3d")
##ax.scatter(N, nnz, c=ratio)

#ndf = pd.concat((N, M, nnz, ratio), axis=1)
#surf = ax.plot_surface(sdf['N'], sdf['M'], sdf['colnnz'], c=sdf['ratio'])
#ax.colorbar()


#plt.figure(2)
##plt.clf();plt.scatter(np.log2(df['N']) + (np.log2(df['M']))*0.1, np.log2(df['colnnz'])+(np.log2(df['M']))*0.01, c=df['ratio']>1)
#plt.clf();plt.scatter(N + 0.1 * M, nnz + 0.02 * M, c=ratio > 1)
#plt.ylabel('nnz + 0.01*M')
#plt.xlabel('N +0.1*M')
#
#MN = M * N
#plt.figure(3)
#plt.clf();plt.scatter(MN, nnz, c=ratio>1)
#plt.ylabel('nnz')
#plt.xlabel('N*M')
#
#maxMN = pd.concat((N, M), axis=1).max(axis=1)
#plt.figure(4)
#plt.clf();plt.scatter(maxMN + 0.01*M, nnz+0.01*N, c=ratio>1)
#plt.ylabel('nnz')
#plt.xlabel('max(MN)')

#plt.figure(1);plt.clf()
#plt.plot(pow2s, ratio, '-ok')
#plt.figure(2);#plt.clf()
#plt.plot(pow2s, out1, '-ob', pow2s, out2, '-oy')
#plt.figure(3);#plt.clf()
#plt.plot(range(2, 10), out1, '-ob', range(2, 10), out2, '-oy')
#plt.figure(4);plt.clf()
#plt.plot(pow2s, alpha, '-o')
